{"ast":null,"code":"/**\n * Development repository: https://github.com/kaisalmen/WWOBJLoader\n */\nimport { LineBasicMaterial, MaterialLoader, MeshStandardMaterial, PointsMaterial } from \"../../../../../build/three.module.js\";\n\nvar MaterialHandler = function MaterialHandler() {\n  this.logging = {\n    enabled: false,\n    debug: false\n  };\n  this.callbacks = {\n    onLoadMaterials: null\n  };\n  this.materials = {};\n};\n\nMaterialHandler.prototype = {\n  constructor: MaterialHandler,\n\n  /**\n   * Enable or disable logging in general (except warn and error), plus enable or disable debug logging.\n   *\n   * @param {boolean} enabled True or false.\n   * @param {boolean} debug True or false.\n   */\n  setLogging: function setLogging(enabled, debug) {\n    this.logging.enabled = enabled === true;\n    this.logging.debug = debug === true;\n  },\n  _setCallbacks: function _setCallbacks(onLoadMaterials) {\n    if (onLoadMaterials !== undefined && onLoadMaterials !== null && onLoadMaterials instanceof Function) {\n      this.callbacks.onLoadMaterials = onLoadMaterials;\n    }\n  },\n\n  /**\n   * Creates default materials and adds them to the materials object.\n   *\n   * @param overrideExisting boolean Override existing material\n   */\n  createDefaultMaterials: function createDefaultMaterials(overrideExisting) {\n    var defaultMaterial = new MeshStandardMaterial({\n      color: 0xDCF1FF\n    });\n    defaultMaterial.name = 'defaultMaterial';\n    var defaultVertexColorMaterial = new MeshStandardMaterial({\n      color: 0xDCF1FF\n    });\n    defaultVertexColorMaterial.name = 'defaultVertexColorMaterial';\n    defaultVertexColorMaterial.vertexColors = true;\n    var defaultLineMaterial = new LineBasicMaterial();\n    defaultLineMaterial.name = 'defaultLineMaterial';\n    var defaultPointMaterial = new PointsMaterial({\n      size: 0.1\n    });\n    defaultPointMaterial.name = 'defaultPointMaterial';\n    var runtimeMaterials = {};\n    runtimeMaterials[defaultMaterial.name] = defaultMaterial;\n    runtimeMaterials[defaultVertexColorMaterial.name] = defaultVertexColorMaterial;\n    runtimeMaterials[defaultLineMaterial.name] = defaultLineMaterial;\n    runtimeMaterials[defaultPointMaterial.name] = defaultPointMaterial;\n    this.addMaterials(runtimeMaterials, overrideExisting);\n  },\n\n  /**\n   * Updates the materials with contained material objects (sync) or from alteration instructions (async).\n   *\n   * @param {Object} materialPayload Material update instructions\n   * @returns {Object} Map of {@link Material}\n   */\n  addPayloadMaterials: function addPayloadMaterials(materialPayload) {\n    var material, materialName;\n    var materialCloneInstructions = materialPayload.materials.materialCloneInstructions;\n    var newMaterials = {};\n\n    if (materialCloneInstructions !== undefined && materialCloneInstructions !== null) {\n      var materialNameOrg = materialCloneInstructions.materialNameOrg;\n      materialNameOrg = materialNameOrg !== undefined && materialNameOrg !== null ? materialNameOrg : \"\";\n      var materialOrg = this.materials[materialNameOrg];\n\n      if (materialOrg) {\n        material = materialOrg.clone();\n        materialName = materialCloneInstructions.materialName;\n        material.name = materialName;\n        Object.assign(material, materialCloneInstructions.materialProperties);\n        this.materials[materialName] = material;\n        newMaterials[materialName] = material;\n      } else {\n        if (this.logging.enabled) {\n          console.info('Requested material \"' + materialNameOrg + '\" is not available!');\n        }\n      }\n    }\n\n    var materials = materialPayload.materials.serializedMaterials;\n\n    if (materials !== undefined && materials !== null && Object.keys(materials).length > 0) {\n      var loader = new MaterialLoader();\n      var materialJson;\n\n      for (materialName in materials) {\n        materialJson = materials[materialName];\n\n        if (materialJson !== undefined && materialJson !== null) {\n          material = loader.parse(materialJson);\n\n          if (this.logging.enabled) {\n            console.info('De-serialized material with name \"' + materialName + '\" will be added.');\n          }\n\n          this.materials[materialName] = material;\n          newMaterials[materialName] = material;\n        }\n      }\n    }\n\n    materials = materialPayload.materials.runtimeMaterials;\n    newMaterials = this.addMaterials(materials, true, newMaterials);\n    return newMaterials;\n  },\n\n  /**\n   * Set materials loaded by any supplier of an Array of {@link Material}.\n   *\n   * @param materials Object with named {@link Material}\n   * @param overrideExisting boolean Override existing material\n   * @param newMaterials [Object] with named {@link Material}\n   */\n  addMaterials: function addMaterials(materials, overrideExisting, newMaterials) {\n    if (newMaterials === undefined || newMaterials === null) {\n      newMaterials = {};\n    }\n\n    if (materials !== undefined && materials !== null && Object.keys(materials).length > 0) {\n      var material;\n      var existingMaterial;\n      var add;\n\n      for (var materialName in materials) {\n        material = materials[materialName];\n        add = overrideExisting === true;\n\n        if (!add) {\n          existingMaterial = this.materials[materialName];\n          add = existingMaterial === null || existingMaterial === undefined;\n        }\n\n        if (add) {\n          this.materials[materialName] = material;\n          newMaterials[materialName] = material;\n        }\n\n        if (this.logging.enabled && this.logging.debug) {\n          console.info('Material with name \"' + materialName + '\" was added.');\n        }\n      }\n    }\n\n    if (this.callbacks.onLoadMaterials) {\n      this.callbacks.onLoadMaterials(newMaterials);\n    }\n\n    return newMaterials;\n  },\n\n  /**\n   * Returns the mapping object of material name and corresponding material.\n   *\n   * @returns {Object} Map of {@link Material}\n   */\n  getMaterials: function getMaterials() {\n    return this.materials;\n  },\n\n  /**\n   *\n   * @param {String} materialName\n   * @returns {Material}\n   */\n  getMaterial: function getMaterial(materialName) {\n    return this.materials[materialName];\n  },\n\n  /**\n   * Returns the mapping object of material name and corresponding jsonified material.\n   *\n   * @returns {Object} Map of Materials in JSON representation\n   */\n  getMaterialsJSON: function getMaterialsJSON() {\n    var materialsJSON = {};\n    var material;\n\n    for (var materialName in this.materials) {\n      material = this.materials[materialName];\n      materialsJSON[materialName] = material.toJSON();\n    }\n\n    return materialsJSON;\n  },\n\n  /**\n   * Removes all materials\n   */\n  clearMaterials: function clearMaterials() {\n    this.materials = {};\n  }\n};\nexport { MaterialHandler };","map":null,"metadata":{},"sourceType":"module"}